package {{packageName}};

import static edu.mayo.kmdp.id.helper.DatatypeHelper.indexByUUID;
import static edu.mayo.kmdp.id.helper.DatatypeHelper.resolveTerm;
import static edu.mayo.kmdp.id.helper.DatatypeHelper.resolveAliases;
import static edu.mayo.kmdp.id.helper.DatatypeHelper.versionOf;

import edu.mayo.kmdp.id.helper.DatatypeHelper;
import edu.mayo.kmdp.id.Identifier;
import edu.mayo.kmdp.id.Term;
import edu.mayo.kmdp.id.VersionedIdentifier;
import edu.mayo.kmdp.series.Series;
import edu.mayo.kmdp.terms.ConceptTerm;
import edu.mayo.kmdp.terms.TermDescription;
import edu.mayo.kmdp.terms.impl.model.TermImpl;
import edu.mayo.kmdp.util.DateTimeUtil;
import java.net.URI;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import org.omg.spec.api4kp._1_0.identifiers.NamespaceIdentifier;
import org.omg.spec.api4kp._1_0.identifiers.URIIdentifier;
import org.omg.spec.api4kp._1_0.identifiers.VersionTagType;

import {{intfPackageName}}.{{seriesName}};
import {{implClassName}};


{{#jaxb}}
@javax.xml.bind.annotation.XmlType(name = "{{typeName}}")
@javax.xml.bind.annotation.XmlEnum
@javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter( {{typeName}}.Adapter.class )
{{/jaxb}}
{{#json}}
@com.fasterxml.jackson.databind.annotation.JsonSerialize( using = {{typeName}}.JsonSerializer.class )
@com.fasterxml.jackson.databind.annotation.JsonDeserialize( using = {{typeName}}.JsonDeserializer.class )
{{/json}}
public enum {{typeName}} implements {{intfPackageName}}.{{intfName}} {

   {{#concepts}}

    /* {{comment}} */
    {{#jaxb}}@javax.xml.bind.annotation.XmlEnumValue("{{tag}}"){{/jaxb}}
    {{#jsonld}}@de.escalon.hypermedia.hydra.mapping.Expose( "{{ref}}" ){{/jsonld}}
    {{termConceptName}}( "{{conceptId}}", "{{conceptUUID}}", "{{tag}}", java.util.Arrays.asList( {{#notations}}"{{.}}"{{^-last}}, {{/-last}}{{/notations}} ), "{{label}}", "{{ref}}",
        new Term[] { {{#ancestors}} {{#overridePk}}{{termConceptPackage}}{{/overridePk}}.{{termConceptScheme}}.{{termConceptName}}, {{/ancestors}} },
        new Term[] { {{#closure}} {{#overridePk}}{{termConceptPackage}}{{/overridePk}}.{{termConceptScheme}}.{{termConceptName}}, {{/closure}} } ) {{^-last}}, {{/-last}}
   {{/concepts}};


  public static final URIIdentifier schemeURI = Series.toVersion(
      new URIIdentifier()
          .withUri( URI.create( "{{seriesNamespace}}" )),
      URI.create("{{namespace}}"));

  public static final NamespaceIdentifier namespace = new NamespaceIdentifier()
      .withId(URI.create("{{namespace}}"))
      .withLabel( {{intfPackageName}}.{{intfName}}.schemeName )
      .withTag( {{intfPackageName}}.{{intfName}}.schemeID )
      .withVersion( "{{conceptScheme.version}}" )
      .withVersioning( VersionTagType.TIMESTAMP )
      .withEstablishedOn( DateTimeUtil.parseDate("{{publicationDate}}") );

  public static final Map<UUID, {{typeName}}> index = indexByUUID({{typeName}}.values());

  private TermDescription description;
  private {{seriesName}} series;

  public TermDescription getDescription() {
    return description;
  }

  {{typeName}}(final String conceptId, final String conceptUUID,
      final String code, final List<String> additionalCodes,
      final String displayName, final String referent,
      final Term[] ancestors,
      final Term[] closure) {
    this.description = new TermImpl(conceptId, conceptUUID, code, additionalCodes, displayName,
        referent, ancestors, closure);
    this.series = series;
  }

  @Override
  public NamespaceIdentifier getNamespace() {
    return namespace;
  }

  @Override
  public VersionedIdentifier getVersionIdentifier() {
    return new NamespaceIdentifier()
      .withId(getConceptId())
      .withLabel(getLabel())
      .withTag(getTag())
      .withVersion(namespace.getVersion())
      .withVersioning( VersionTagType.TIMESTAMP )
      .withEstablishedOn(namespace.getEstablishedOn());
  }

  @Override
  public {{seriesName}} asEnum() {
    return toSeries();
  }

  @Override
  public Series<{{intfPackageName}}.{{intfName}}> asSeries() {
    return toSeries();
  }

  private {{seriesName}} toSeries() {
    if (series == null) {
      series = ({{seriesName}}) {{seriesName}}.resolveUUID(this.getConceptUUID())
        .orElseThrow(IllegalStateException::new);
    }
    return series;
  }

  public static class Adapter extends {{baseXmlAdapter}} {
    public static final {{baseXmlAdapter}} instance = new Adapter();
    protected Term[] getValues() { return values(); }
	}

  public static class JsonSerializer extends {{baseJsonAdapter}}.Serializer<{{typeName}}> {}

  public static class JsonDeserializer extends {{baseJsonAdapter}}.Deserializer<{{typeName}}> {
    protected {{typeName}}[] getValues() {
      return values();
    }
    @Override
    protected Optional<{{typeName}}> resolveUUID(UUID uuid) {
      return {{typeName}}.resolveUUID(uuid);
    }
  }


  public static Optional<{{typeName}}> resolve(final Term trm) {
    return resolveId(trm.getConceptId());
  }

  public static Optional<{{typeName}}> resolve(final String tag) {
    return resolveTag(tag);
  }

  public static Optional<{{typeName}}> resolveId(final String conceptId) {
    return resolveId(URI.create(conceptId));
  }

  public static Optional<{{typeName}}> resolveRef(final String refUri) {
    return resolveRef(URI.create(refUri));
  }

  public static Optional<{{typeName}}> resolveTag(final String tag) {
    Optional<{{typeName}}> l = resolveTerm(tag, {{typeName}}.values(), Term::getTag);
    if (!l.isPresent()) {
      l = resolveAliases(tag, {{typeName}}.values(), ConceptTerm::getTags);
    }
    return l;
  }

  public static Optional<{{typeName}}> resolveUUID(final UUID conceptId) {
    return Optional.of(index.get(conceptId));
  }

  public static Optional<{{typeName}}> resolveId(final URI conceptId) {
    return resolveTerm(conceptId, {{typeName}}.values(), Term::getConceptId);
  }

  public static Optional<{{typeName}}> resolveRef(final URI refUri) {
    return resolveTerm(refUri, {{typeName}}.values(), Term::getRef);
  }

}
