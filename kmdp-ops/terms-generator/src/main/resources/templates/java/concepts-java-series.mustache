package {{intfPackageName}};

import static edu.mayo.kmdp.id.helper.DatatypeHelper.indexByUUID;
import static edu.mayo.kmdp.id.helper.DatatypeHelper.resolveAliases;
import static edu.mayo.kmdp.id.helper.DatatypeHelper.resolveTerm;

import org.omg.spec.api4kp._20200801.series.Series;
import org.omg.spec.api4kp._20200801.terms.ConceptTerm;
import org.omg.spec.api4kp._20200801.terms.TermDescription;

import java.net.URI;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import org.omg.spec.api4kp._20200801.id.ResourceIdentifier;
import org.omg.spec.api4kp._20200801.id.Term;
import org.omg.spec.api4kp._20200801.id.VersionIdentifier;

{{#jaxb}}
@javax.xml.bind.annotation.XmlType(name = "{{seriesName}}")
@javax.xml.bind.annotation.XmlEnum
@javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter( {{seriesName}}.Adapter.class )
{{/jaxb}}
{{#json}}
@com.fasterxml.jackson.databind.annotation.JsonSerialize( using = {{seriesName}}.JsonSerializer.class )
@com.fasterxml.jackson.databind.annotation.JsonDeserialize( using = {{seriesName}}.JsonDeserializer.class )
{{/json}}
public enum {{seriesName}} implements {{intfName}}, Series<{{intfName}}> {

   {{#conceptSeries}}
    {{term}}( {{#versions}} {{.}}  {{^-last}}, {{/-last}} {{/versions}} ) {{^-last}}, {{/-last}}
   {{/conceptSeries}};

  private static final Map<UUID, {{seriesName}}> index = indexByUUID({{seriesName}}.values());

  public static final List<String> schemeVersions =
      java.util.Arrays.asList({{#schemeVersions}} "{{.}}"  {{^-last}}, {{/-last}} {{/schemeVersions}});

  public static final List<Date> schemeReleases =
      edu.mayo.kmdp.util.DateTimeUtil.parseDates(java.util.Arrays.asList({{#publicationDates}} "{{.}}"  {{^-last}}, {{/-last}} {{/publicationDates}}));

  public static final List<URI> schemeVersionIdentifiers =
      java.util.Arrays.asList(
            {{#schemeVersionIdentifiers}} URI.create("{{.}}") {{^-last}}, {{/-last}} {{/schemeVersionIdentifiers}}
          );

  public static final URI latestVersionIdentifier = schemeVersionIdentifiers.get(0);

  private List<{{intfName}}> versions;

  {{seriesName}}({{intfName}}... versions) {
    this.versions = Arrays.asList(versions);
  }

  public List<{{intfName}}> getVersions() {
    return versions;
  }

  public {{seriesName}} asEnum() {
    return this;
  }

  public Series<{{intfName}}> asSeries() {
    return this;
  }

  public static int count() {
    return values().length;
  }

  public static int countUnexpired() {
    return  (int) Arrays.stream(values())
        .filter(x -> !x.isSeriesExpired())
        .count();
  }

  @Override
  public TermDescription getDescription() {
    return latest().map(ConceptTerm::getDescription)
        .orElse(null);
  }

  @Override
  public ResourceIdentifier getNamespace() {
    return {{intfName}}.seriesNamespace;
  }
  
  @Override
  public VersionIdentifier getVersionIdentifier() {
    return getLatest().getVersionIdentifier();
  }

  @Override
  public URI getVersionId() {
    return getLatest().getVersionId();
  }

  @Override
  public boolean isSeriesExpired() {
    Date lastEstablished = getLatest().getVersionEstablishedOn();
    return ! schemeReleases.isEmpty() && schemeReleases.get(0).compareTo(lastEstablished) > 0;
  }

  @Override
  public Optional<Date> getSeriesExpiredOn() {
    Date lastEstablished = getLatest().getVersionEstablishedOn();
    return schemeReleases.stream()
        .filter(r -> r.compareTo(lastEstablished) > 0)
        .min(java.util.Comparator.naturalOrder());
  }

  @Override
  public String getVersionTag() {
    return getDescription().getVersionTag();
  }

  @Override
  public Date getEstablishedOn() {
    return getVersions().get(getVersions().size() - 1).getEstablishedOn();
  }

  @Override
  public Date getVersionEstablishedOn() {
    return getEstablishedOn();
  }

  @Override
  public UUID getUuid() {
    return getDescription().getUuid();
  }

  @Override
  public URI getResourceId() {
    return getDescription().getResourceId();
  }

  public static Optional<{{intfName}}> resolve(final Term trm) {
    return trm != null ? resolveId(trm.getConceptId()) : Optional.empty();
  }

  public static Optional<{{intfName}}> resolve(final String tag) {
    return tag != null ? resolveTag(tag) : Optional.empty();
  }

  public static Optional<{{intfName}}> resolveId(final String conceptId) {
    return conceptId != null ? resolveId(URI.create(conceptId)) : Optional.empty();
  }

  public static Optional<{{intfName}}> resolveRef(final String refUri) {
    return refUri != null ? resolveRef(URI.create(refUri)) : Optional.empty();
  }

  public static Optional<{{intfName}}> resolveTag(final String tag) {
    Optional<{{intfName}}> l = resolveTerm(tag,  {{seriesName}}.values(), Term::getTag);
    if (!l.isPresent()) {
      l = resolveAliases(tag,  {{seriesName}}.values(), ConceptTerm::getTags);
    }
    return l;
  }

  public static Optional<{{intfName}}> resolveUUID(final UUID conceptId) {
    return conceptId != null
      ? Optional.ofNullable(index.get(conceptId))
      : Optional.empty();
  }

  public static Optional<{{intfName}}> resolveId(final URI conceptId) {
    return resolveTerm(conceptId, {{seriesName}}.values(), Term::getConceptId);
  }

  public static Optional<{{intfName}}> resolveRef(final URI refUri) {
    return resolveTerm(refUri, {{seriesName}}.values(), Term::getReferentId);
  }


  public static class Adapter extends edu.mayo.kmdp.terms.adapters.xml.TermsXMLAdapter {
    public static final edu.mayo.kmdp.terms.adapters.xml.TermsXMLAdapter instance = new {{seriesName}}.Adapter();
    protected {{seriesName}}[] getValues() { return values(); }
  }


  public static class JsonSerializer extends {{baseJsonAdapter}}.Serializer<{{intfName}}> {

  }

  public static class JsonDeserializer extends {{baseJsonAdapter}}.Deserializer<{{intfName}}> {
    protected {{intfName}}[] getValues() { return values(); }

    @Override
    protected Optional<{{intfName}}> resolveUUID(UUID uuid) {
      return {{seriesName}}.resolveUUID(uuid);
    }
  }

}


