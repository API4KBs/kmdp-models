package {{packageName}};

import java.net.URI;
import java.util.Arrays;
import java.util.Optional;

import edu.mayo.kmdp.id.Term;
import edu.mayo.kmdp.id.Identifier;
import edu.mayo.kmdp.id.helper.DatatypeHelper;
import edu.mayo.kmdp.terms.ConceptScheme;
import edu.mayo.kmdp.terms.ConceptSchemeDirectory;
import edu.mayo.kmdp.terms.Taxonomic;
import edu.mayo.kmdp.terms.TermsXMLAdapter;
import edu.mayo.kmdp.terms.impl.model.DefaultConceptScheme;

import org.omg.spec.api4kp._1_0.identifiers.URIIdentifier;
import org.omg.spec.api4kp._1_0.identifiers.NamespaceIdentifier;

import {{implClassName}};


{{#jaxb}}
@javax.xml.bind.annotation.XmlType(name = "{{typeName}}")
@javax.xml.bind.annotation.XmlEnum
@javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter( {{typeName}}.Adapter.class )
{{/jaxb}}
{{#json}}
@com.fasterxml.jackson.databind.annotation.JsonSerialize( as = org.omg.spec.api4kp._1_0.identifiers.ConceptIdentifier.class, using = edu.mayo.kmdp.terms.TermsJsonAdapter.Serializer.class )
@com.fasterxml.jackson.databind.annotation.JsonDeserialize( using = edu.mayo.kmdp.terms.TermsJsonAdapter.Deserializer.class )
{{/json}}

public enum {{typeName}} implements Term, Taxonomic<{{typeName}}> {

   {{#concepts}}

    /* {{comment}} */
    {{#jaxb}}@javax.xml.bind.annotation.XmlEnumValue("{{tag}}"){{/jaxb}}
    {{#jsonld}}@de.escalon.hypermedia.hydra.mapping.Expose( "{{ref}}" ){{/jsonld}}
    {{termConceptName}}( "{{conceptId}}", "{{tag}}", "{{label}}", "{{ref}}",
        new Term[] { {{#ancestors}} {{typeName}}.{{termConceptName}}, {{/ancestors}} },
        new Term[] { {{#closure}} {{typeName}}.{{termConceptName}}, {{/closure}} } ) {{^-last}}, {{/-last}}
   {{/concepts}};



  public static final String schemeName = "{{conceptScheme.label}}";
  public static final String schemeID = "{{conceptScheme.id.fragment}}";

  public static final URIIdentifier schemeURI = new URIIdentifier()
                                                    .withUri( URI.create( "{{conceptScheme.id}}" ) )
                                                    .withVersionId( URI.create( "{{conceptScheme.versionId}}" ) );

	public static final NamespaceIdentifier __SCHEME = new NamespaceIdentifier().withId( schemeURI.getUri() )
    	                                                                      .withLabel( schemeName )
    	                                                                      .withTag( schemeID )
    	                                                                      .withVersion( DatatypeHelper.versionOf( schemeURI.getVersionId(), schemeURI.getUri() ) );

  private URI	ref;
	private String displayName;
	private String tag;
	private URI conceptId;

	private Term[] ancestors;
	private Term[] ancestorsClosure;

	{{typeName}}( String conceptId, String code, String displayName, String referent, Term[] ancestors, Term[] closure ) {
		this.ref = URI.create( referent );
		this.tag = code;
		this.displayName = displayName;
		this.ancestors = ancestors;
		this.ancestorsClosure = closure;
		this.conceptId = URI.create( conceptId );
	}


	@Override
	public String getLabel() {
		return displayName;
	}

	@Override
	public String getTag() {
		return tag;
	}

	@Override
	public URI getRef() {
		return ref;
	}

	@Override
	public URI getConceptId() {
	  return conceptId;
	}

	@Override
	public NamespaceIdentifier getNamespace() {
	  return __SCHEME;
	}

  public org.omg.spec.api4kp._1_0.identifiers.ConceptIdentifier asConcept() {
    return {{packageName}}.{{typeName}}.Adapter.instance.marshal( this );
  }

  public org.omg.spec.api4kp._1_0.identifiers.QualifiedIdentifier asQualified() {
    return edu.mayo.kmdp.id.helper.DatatypeHelper.toQualifiedIdentifier( this.ref );
  }

	@Override
	public Term[] getClosure() {
		return ancestorsClosure;
	}

	public Term[] getAncestors() {
		return ancestors;
	}


	public static Optional<{{typeName}}> resolve( final Term trm ) {
		return {{termsProvider}}.resolve( trm, {{typeName}}.class );
	}

	public static Optional<{{typeName}}> resolve( final String tag ) {
		return {{termsProvider}}.resolve( tag, {{typeName}}.class );
	}

	public static Optional<{{typeName}}> resolveRef( final String refUri ) {
		return {{termsProvider}}.resolveRef( refUri, {{typeName}}.class );
	}

	public static Optional<{{typeName}}> resolveId( final String conceptId ) {
		return {{termsProvider}}.resolveId( conceptId, {{typeName}}.class );
	}

  public static class Adapter extends TermsXMLAdapter {
    public static final TermsXMLAdapter instance = new Adapter();
    protected Term[] getValues() { return values(); }
	}
}


